//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WDSE.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("WDSE.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * @return {boolean}
        /// */
        ///let IsElementHasScrollbar = function(element) {
        ///
        ///    if (element.tagName === document.scrollingElement.tagName &amp;&amp; typeof window.innerWidth === &quot;number&quot;) {
        ///        return window.innerWidth &gt; document.documentElement.clientWidth;
        ///    }
        ///
        ///    let overflowStyle;
        ///
        ///    if (typeof element.currentStyle !== &quot;undefined&quot;)
        ///        overflowStyle = element.currentStyle.overflow;
        ///
        ///    overflowStyle = overflowStyle || window.getComputedStyle(element, &quot;&quot;).overflow;
        ///
        ///    let overfl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetAllElementsWithScrollBars {
            get {
                return ResourceManager.GetString("GetAllElementsWithScrollBars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function absoluteXPath(element) {
        ///    var comp;
        ///    const comps = [];
        ///    var xpath = &quot;&quot;;
        ///    const getPos = function(element) {
        ///        var position = 1, curNode;
        ///        if (element.nodeType == Node.ATTRIBUTE_NODE) {
        ///            return null;
        ///        }
        ///        for (curNode = element.previousSibling; curNode; curNode = curNode.previousSibling) {
        ///
        ///            if (curNode.nodeName == element.nodeName) {
        ///                ++position;
        ///            }
        ///        }
        ///        return position;
        ///    };
        ///
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetElementAbsoluteXPath {
            get {
                return ResourceManager.GetString("GetElementAbsoluteXPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function GetCoords(element) {
        ///    var coords = $(element)[0].getBoundingClientRect();
        ///    var left = parseInt(coords.left);
        ///    var top = parseInt(coords.top);
        ///    var width = parseInt(coords.width);
        ///    var height = parseInt(coords.height);
        ///    var bottom = parseInt(coords.bottom);
        ///    const x = left;
        ///    const y = top;
        ///    var str = JSON.stringify({
        ///        x: x,
        ///        y: y,
        ///        width: width,
        ///        height: height,
        ///        bottom: bottom
        ///    });
        ///    return str;
        ///}
        ///
        ///return GetCoord [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetElementCoordinates {
            get {
                return ResourceManager.GetString("GetElementCoordinates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function GetVisibleState(y, bottom) {
        ///    var win = $(window);
        ///    var elementTop = Math.max(y, 0);
        ///    var elementBottom = Math.min(bottom, win.height());
        ///    var viewportTop = 0;
        ///    var viewportBottom = win.height();
        ///    var result = elementTop &gt;= viewportTop &amp;&amp;
        ///        elementTop &lt; viewportBottom &amp;&amp;
        ///        elementBottom &lt;= viewportBottom &amp;&amp;
        ///        elementBottom &gt; viewportTop;
        ///    return result;
        ///}
        ///
        ///return GetVisibleState(arguments[0], arguments[1]);.
        /// </summary>
        internal static string GetElementVisibleState {
            get {
                return ResourceManager.GetString("GetElementVisibleState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let GetElementWithActiveScrollBar = function(elements) {
        ///    let jQueryElements = $(elements);
        ///    if (jQueryElements.length === 0) return null;
        ///    if (jQueryElements.first().get(0) === document.scrollingElement) return jQueryElements.get(0);
        ///    if (jQueryElements.length === 1) return jQueryElements.get(0);
        ///    const scrollBarsHeight = jQueryElements.map(function() {
        ///        return $(this)[0].scrollHeight;
        ///    });
        ///    const scrollBarWithMaxHeight = Math.max(...scrollBarsHeight.toArray());
        ///    jQu [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetElementWithActiveScrollbar {
            get {
                return ResourceManager.GetString("GetElementWithActiveScrollbar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var ele = $(arguments[0]);
        ///ele.hide();.
        /// </summary>
        internal static string HideElementFromDOM {
            get {
                return ResourceManager.GetString("HideElementFromDOM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var ele = $(arguments[0]);
        ///ele.css(&quot;overflow&quot;, &quot;hidden&quot;);.
        /// </summary>
        internal static string RemoveScrollBar {
            get {
                return ResourceManager.GetString("RemoveScrollBar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var ele = arguments[0];
        ///ele.scrollIntoView();.
        /// </summary>
        internal static string ScrollToElement {
            get {
                return ResourceManager.GetString("ScrollToElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var ele = document.createElement(&quot;script&quot;);
        ///ele.src = &quot;https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.3.1.min.js&quot;;
        ///var body = document.getElementsByTagName(&quot;head&quot;)[0];
        ///body.appendChild(ele);.
        /// </summary>
        internal static string SetJQuery {
            get {
                return ResourceManager.GetString("SetJQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var ele = $(arguments[0]);
        ///ele.show();.
        /// </summary>
        internal static string ShowElementInDOM {
            get {
                return ResourceManager.GetString("ShowElementInDOM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var ele = $(arguments[0]);
        ///var value = arguments[1];
        ///ele.css(&quot;overflow&quot;, value);.
        /// </summary>
        internal static string ShowScrollBar {
            get {
                return ResourceManager.GetString("ShowScrollBar", resourceCulture);
            }
        }
    }
}
